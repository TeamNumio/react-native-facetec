//
// FaceTec Device SDK config file.
// Auto-generated via the FaceTec SDK Configuration Wizard
//

package com.reactnativefacetec.ZoomProcessors;

import android.content.Context;
import android.graphics.Color;

import com.reactnativefacetec.BuildConfig;
import com.reactnativefacetec.R;
import com.facetec.sdk.*;

public class Config {
  // -------------------------------------
  // REQUIRED
  // Available at https://dev.facetec.com/#/account
  // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
  public static String DeviceKeyIdentifier = "dbAJm57lOvJ0ViuYtpWOIsUhsGxMTv3c";

  // -------------------------------------
  // REQUIRED
  // The URL to call to process FaceTec SDK Sessions.
  // In Production, you likely will handle network requests elsewhere and without the use of this variable.
  // See https://dev.facetec.com/#/security-best-practices?link=facetec-server-rest-endpoint-security for more information.
  // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
  public static String BaseURL = "https://scan.numio.one";

  // -------------------------------------
  // REQUIRED
  // The FaceScan Encryption Key you define for your application.
  // Please see https://dev.facetec.com/#/licensing-and-encryption-keys for more information.
  // NOTE: This field is auto-populated by the FaceTec SDK Configuration Wizard.
  static String PublicFaceScanEncryptionKey =
    "-----BEGIN PUBLIC KEY-----\n" +
      "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3N+du5DlZCuJQkLlj4Hk\n" +
      "xXKsnGa/weUO5juAzBVg3NpQ1i/2b+w0LeQviudSeFhgaId5JD327BHgqgsrNNVH\n" +
      "x6MtmlEMNvpfWFmuFUUcySVx4WU1QqeI20hxaCLCc6Kwcq5Z1ntaDQkyU8/e83VX\n" +
      "On1zofh1iD2pNdNUgbFrwABs+x+rpNXhWRcqTgJmPE40U0pLoBrajIUtsOO2vLpi\n" +
      "RetJuNbYMUjJmlnjnYjk435J9yDl0nmKWAB7u4BBbAUUiAkcKqEHuPUUpPkLI6NZ\n" +
      "yBuXCHCvxUOtVxCoOD/ITqN7ftjmSOI4NAYDRZtgWHuH8JshbgzOm9atIQhW+3qO\n" +
      "0wIDAQAB\n" +
      "-----END PUBLIC KEY-----";


  // -------------------------------------
  // REQUIRED IF: You have had a Production Key generated for you.
  // Production Keys are generated for your account once all steps for Going Production have been completed.
  // More information on Going Production can be found at https://dev.facetec.com/#/going-production-overview.
  //
  // NOTE:  DO NOT hard code this into your actual App. This variable is coded into the App for demonstration purposes only.
  // Your App MUST serve down the key data via your own API. This allows you to change/update keys without making a client-side change.
  // Please see https://dev.facetec.com/#/licensing?link=integrating-production-licenses for more information.
  static String ProductionKeyText =
    "appId      = \"com.numio.pay,com.facetec.sampleapp,com.example.reactnativefacetec\"\n" +
      "expiryDate = 2021-01-10\n" +
      "key        = 003046022100dade3062e2353404aae1d5cc71ec8a58de990501a2599b86817274041a727cfd0221008dd96c4d4cd890e8f70e0915a0860f7dac516b8a666deabcd15f41d13dd5a78c\n";


  // -------------------------------------
  // Convenience method to initialize the FaceTec SDK.
  // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on the Keys issued to your Apps.

  public static void initializeFaceTecSDKFromAutogeneratedConfig(Context context, FaceTecSDK.InitializeCallback callback) {
    FaceTecSDK.initializeInProductionMode(context, ProductionKeyText, DeviceKeyIdentifier, PublicFaceScanEncryptionKey, callback);
  }


  // -------------------------------------
  // This app can modify the customization to demonstrate different look/feel preferences
  // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on your UI Customizations you picked in the Configuration Wizard GUI.
  public static FaceTecCustomization retrieveConfigurationWizardCustomization() {

    // For Color Customization
    int outerBackgroundColor = Color.parseColor("#ffffff");
    int frameColor = Color.parseColor("#ffffff");
    int borderColor = Color.parseColor("#417FB2");
    int ovalColor = Color.parseColor("#417FB2");
    int dualSpinnerColor = Color.parseColor("#417FB2");
    int textColor = Color.parseColor("#417FB2");
    int buttonAndFeedbackBarColor =  Color.parseColor("#417FB2");
    int buttonAndFeedbackBarTextColor = Color.parseColor("#ffffff");
    int buttonColorPressed = Color.parseColor("#417FB2");

    // For Frame Corner Radius Customization
    int frameCornerRadius = 20;

    // For Cancel Button Customization
    int cancelButtonImage = R.drawable.facetec_cancel;
    FaceTecCancelButtonCustomization.ButtonLocation cancelButtonLocation = FaceTecCancelButtonCustomization.ButtonLocation.TOP_LEFT;

    // For image Customization
    int yourAppLogoImage = R.drawable.facetec_your_app_logo;
    FaceTecSecurityWatermarkImage securityWatermarkImage = FaceTecSecurityWatermarkImage.FACETEC_ZOOM;


    // Set a default customization
    FaceTecCustomization defaultCustomization = new FaceTecCustomization();


    // Set Frame Customization
    defaultCustomization.getFrameCustomization().cornerRadius = frameCornerRadius;
    defaultCustomization.getFrameCustomization().backgroundColor = frameColor;
    defaultCustomization.getFrameCustomization().borderColor = borderColor;

    // Set Overlay Customization
    defaultCustomization.getOverlayCustomization().brandingImage = yourAppLogoImage;
    defaultCustomization.getOverlayCustomization().backgroundColor = outerBackgroundColor;

    // Set Guidance Customization
    defaultCustomization.getGuidanceCustomization().backgroundColors = frameColor;
    defaultCustomization.getGuidanceCustomization().foregroundColor = textColor;
    defaultCustomization.getGuidanceCustomization().buttonBackgroundNormalColor = buttonAndFeedbackBarColor;
    defaultCustomization.getGuidanceCustomization().buttonBackgroundDisabledColor = buttonColorPressed;
    defaultCustomization.getGuidanceCustomization().buttonBackgroundHighlightColor = buttonColorPressed;
    defaultCustomization.getGuidanceCustomization().buttonTextNormalColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getGuidanceCustomization().buttonTextDisabledColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getGuidanceCustomization().buttonTextHighlightColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getGuidanceCustomization().retryScreenImageBorderColor = borderColor;
    defaultCustomization.getGuidanceCustomization().retryScreenOvalStrokeColor = borderColor;

    // Set Oval Customization
    defaultCustomization.getOvalCustomization().strokeColor = ovalColor;
    defaultCustomization.getOvalCustomization().progressColor1 = dualSpinnerColor;
    defaultCustomization.getOvalCustomization().progressColor2 = dualSpinnerColor;

    // Set Feedback Customization
    defaultCustomization.getFeedbackCustomization().backgroundColors = buttonAndFeedbackBarColor;
    defaultCustomization.getFeedbackCustomization().textColor = buttonAndFeedbackBarTextColor;

    // Set Cancel Customization
    defaultCustomization.getCancelButtonCustomization().customImage = cancelButtonImage;
    defaultCustomization.getCancelButtonCustomization().setLocation(cancelButtonLocation);

    // Set Result Screen Customization
    defaultCustomization.getResultScreenCustomization().backgroundColors = frameColor;
    defaultCustomization.getResultScreenCustomization().foregroundColor = textColor;
    defaultCustomization.getResultScreenCustomization().activityIndicatorColor = buttonAndFeedbackBarColor;
    defaultCustomization.getResultScreenCustomization().resultAnimationBackgroundColor = buttonAndFeedbackBarColor;
    defaultCustomization.getResultScreenCustomization().resultAnimationForegroundColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getResultScreenCustomization().uploadProgressFillColor = buttonAndFeedbackBarColor;

    // Set Security Watermark Customization
    defaultCustomization.securityWatermarkImage = securityWatermarkImage;

    // Set ID Scan Customization
    defaultCustomization.getIdScanCustomization().selectionScreenBackgroundColors = frameColor;
    defaultCustomization.getIdScanCustomization().selectionScreenForegroundColor = textColor;
    defaultCustomization.getIdScanCustomization().reviewScreenBackgroundColors = frameColor;
    defaultCustomization.getIdScanCustomization().reviewScreenForegroundColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().reviewScreenTextBackgroundColor = buttonAndFeedbackBarColor;
    defaultCustomization.getIdScanCustomization().captureScreenForegroundColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().captureScreenTextBackgroundColor = buttonAndFeedbackBarColor;
    defaultCustomization.getIdScanCustomization().buttonBackgroundNormalColor = buttonAndFeedbackBarColor;
    defaultCustomization.getIdScanCustomization().buttonBackgroundDisabledColor = buttonColorPressed;
    defaultCustomization.getIdScanCustomization().buttonBackgroundHighlightColor = buttonColorPressed;
    defaultCustomization.getIdScanCustomization().buttonTextNormalColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().buttonTextDisabledColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().buttonTextHighlightColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().captureScreenBackgroundColor = frameColor;
    defaultCustomization.getIdScanCustomization().captureFrameStrokeColor = borderColor;


    return defaultCustomization;
  }

  public static FaceTecCustomization currentCustomization = retrieveConfigurationWizardCustomization();

  // -------------------------------------
  // Boolean to indicate the FaceTec SDK Configuration Wizard was used to generate this file.
  // In this Sample App, if this variable is true, a "Config Wizard Theme" will be added to this App's Design Showcase,
  // and choosing this option will set the FaceTec SDK UI/UX Customizations to the Customizations that you selected in the
  // Configuration Wizard.
  public static boolean wasSDKConfiguredWithConfigWizard = true;

  // Used for bookkeeping around demonstrating enrollment/authentication functionality of ZoOm.
  public static String randomUsername = "";
  public static boolean isRandomUsernameEnrolled = false;

}
